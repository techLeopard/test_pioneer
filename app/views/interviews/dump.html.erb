<% provide(:title, "Dump")%>

<h1>Dump</h1>

<div>
    <pre style="white-space: pre-wrap;">
        Что такое тестирование?
        	Проверка программного продукта на соответствие ожидаемого поведения фактическому.


        Что такое ожидаемое поведение? Откуда ты его возьмешь?
        	Требования/спецификация
        	Конкуренты
        	Common sense (здравый смысл)



        Цели тестирования
        	Верификация
        		Определение: Это процесс подтверждения того, что продукт был разработан правильно и соответствует указанным требованиям на всех этапах разработки.
        		Цель: Убедиться, что продукт соответствует спецификациям и техническим требованиям.
        		Пример: Если требование гласит, что кнопка должна быть красного цвета, то верификация будет проверять, действительно ли кнопка красного цвета.
        	Валидация
        		Определение: Это процесс подтверждения того, что продукт соответствует предполагаемым потребностям и ожиданиям пользователей.
        		Цель: Убедиться, что продукт правильно решает проблемы, для которых он был разработан, и встречает ожидания пользователей.
        		Пример: Если продукт разрабатывается для онлайн-покупок, валидация может включать в себя проверку того, насколько удобно и эффективно пользователи могут осуществлять покупки через приложение.
        	Поиск ошибок
        		Определение: Это процесс идентификации и документирования дефектов в продукте.
        		Цель: Обнаружить и документировать все возможные ошибки в программном обеспечении перед его выпуском.
        		Пример: Если приложение неожиданно закрывается при нажатии определенной кнопки, процесс поиска ошибок будет включать в себя документирование этого дефекта и условий, при которых он произошел.



        Виды тестирования
        	По степени автоматизации
        		ручное
        		ручное с частичной автоматизацией
        			тестирование безопасности (раньше был антивирус)
        		автоматизированное тестирование
        			зависит от вида тестирования (есть виды тестирования где автотестирование неприменимо, например, ux)
        			виды, где без автоматизации никак нельзя:
        				тестирование производительности
        				unit-тестирование
        	По объектам тестирования
        		функциональное
        			smoke (дымовое) (тестирование критического пути/critical path, расширенное тестирование/extended)
        			sanity
        			security
        		нефункциональное
        			ui
        			ux
        			тестирование производительности
        				нагрузочное тестирование
        				стресс тестирование
        				тестирование масштабируемости
        				объемное тестирование
        			тестирование локализации
        				язык
        				формат даты
        				формат времени
        				единицы измерения (длина, температура)
        			тестирование интернационализации				
        			регрессионное
        			инсталляционное
        				установка, обновление, удаление приложения
        			тестирование помех
        			кросс-браузерное тестирование - браузер (версия браузера)
        			обратная совместимость
        			кросс-платформенное тестирование
        				операционные системы (версия ос)
        				железо



        	По уровням тестирования
        		системное
        			тестирование работы приложения в целом
        		модульное
        			разработчик написал модуль и сам его протестировал
        		интеграционное
        			проверка взаимодействия модулей между собой
        		приемочное (проводится в соотвествии с acceptance plan/план приемочных работ)
        			документ/требование (например, отсутствие критических багов)



        	По запуску кода на исполнение
        		Статическое (без запуска кода) например, тестирование документации. Или статический анализатор кода в IDE. Code review.
        		Динамическое


        	Техники тестирования по уровню доступа к коду и что мы покрываем тестами
        		Белый ящик (glass box)
        			когда мы видим код, разбираемся в нем и покрываем тестами сам код
        		Черный ящик (black box)
        			когда мы тестируем без доступа к коду, по на уровне пользователя, покрываем тестами бизнес-логику
        		Серый ящик (grey box)	
        			Запросы на сервер 




        Тестовая документация
        	Тест стратегия
        		Цель тестирования
        		Виды тестирования

        	Тест план
        		Критерии начала тестирования
        			Предоставление железа для тестирования
        			Документация
        			Функционал для тестирования (готов ли модуль)
        		Критерии окончания тестирования
        		Окружение
        		Ресурсы
        		Инструменты
        		Требования к тестовой лаборатории (эмуляторы или устройства)
        	Тест кейс
        		Ожидаемое поведение

        		Шаги для выполнения
        		Предусловия
        			Условия чтобы привести систему в определенное состояние и потом сценарий.
        		Постусловия
        			Указываем что нужно сделать чтобы систему вернуть в состояние до тестирование.
        	Чеклисты
        		это список проверок
        	Баг репорт
        		Ожидаемое и реальное поведение
        		Отчет о расхождении поведения
        		Приоритет
        		Окружение
        			Устройство, ОС и версия ОС
        		Версия билда приложения
        		Логи
        		Фото и видео




        	Критерии выбора между чеклистом и тест кейсом
        		Время
        			Мало - чеклисты
        			Много - тесткейсы
        		Коллеги
        			Мало - чеклисты
        			Много - тесткейсы
        		Сложность проверки
        			Системы, где чеклистом не отделаешься. Много шагов и в любом случае будешь писать.



        Жизненный цикл баг-репорта
        	Назначаем разработчику баг
        	Он чинит
        	Получаем исправленную версию
        	Ре-тестим
        	Сабмитим к релизу



        	Если ошибка воспроизводится у тестировщика, а у разработчика нет, то выяснить причину.
        	Возможные причины:
        		Разные версии билдов
        		Окружение похожее
        		Починил, но не сабмитнул в общее окружение

        	Если ошибка воспроизводиться, разработчик возвращает со статусом:
        		Дубликат (попросить ссылку на дубликат)
        		Won't Do - Модуль или функция запланирована к удалению в скором времени. Починка нецелесообразна.
        		Can't reproduce - выясняем окружение и тд.

        	Если разработчик отказывается выполнять работу, обратиться к ПМ-у.
        	А дальше баг могут переназначить или отложить из Спринт-бэклога в продукт-бэклог.


        Тест-дизайн. Зачем нам нужен тест-дизайн? Что он нам дает?
        	Нужен для обеспечения максимального покрытия тестами
        Техники тест-дизайна
        	Эквивалентное разбиение
        		Ввести минимальное количество символов определенного класса эквивалентности (буквы, цифры, спецсимволы, файлы определенного формата)
        	Анализ граничных значений (boundary value testing)
        		Тестирование граничных значений и выходящих за границы значений. 4-5 тестов. (Пример, от 5 до 100. Проверяем 5, 100, 4 и 101). Пятая проверка, например, 50, будет опциональной.
        		Проверка буквенных значений (например, таблица с фильтром от Г то З)
        	Диаграмма перехода состояний
        	Попарное тестирование




        Виды приложений
        	Вебприложения
        	Нативные (native)
        	Гибридные


        	Какие особенности работы и тестирования веб приложений
        		Ничего не нужно устанавливать
        		Тестирование происходит через браузер
        		Не может работать без интернета
        		Не требует разрешение на обновление
        	Как происходит взаимодействие между браузером и клиентом? Чем регулируется?
        		HTTP
        	Составные части HTTP запроса
        		Метод
        		Заголовок запроса (header)
        			Информация о браузере, о языке на котором обращается)
        		Тело запроса (body)
        	Составные части HTTP ответа
        		Статус-код ответа
        		Заголовки
        		Тело ответа

        	Какой статус-код придет если сервер сломался?
        		500-й
        	А если клиент?
        		400-й
        	А если все хорошо?
        		200-й?



        	Какие виды тестирования ты бы применил к веб приложениям?
        		Функциональное
        		UI
        		UX
        		Кросс-браузерное
        		Локализации (если есть разные локали)



        	Нативные приложения
        		Устанавливаются на устройство
        		Для технической части могут работать без интернета, но современные приложения часто работают с контентом который хранится на серверах
        		Требует разрешение на обновление

        		(Чисто нативно приложение - Калькулятор, фонарик, блокнот)

        		Виды тестов для наливного приложения:
        			Функциональное
        			UI
        			UX
        			Инсталляционное
        			Кросс-платформенное
        			Тестирование помех


        	Гибридные приложения
        		"Мозги" приложения находятся на веб-сервере.
        		Разрешение на обновление не требуется.
        		Обновление логики на сервере не требует адаптации под различные операционные системы.

        		например, Магазин Steam.


        	Как проверить приложение нативное или гибридное?
        	Выключаем интернет, заходим в приложение и смотрим.
        	Наивное приложение позволит пользоваться приложением, но с данными, которые были подгружены при последнем подключении к интернету. Бизнес-логика приложения не сломается.

        	Гибридное приложение работать не будет, так как бизнес-логика находится на сервере.
        	(Тонкий клиент) - точка входа - исполняемый файл.




        Методологии
        	Водопадная модель (waterfall) или каскадная модель
        		 Этапы
        			Проектирование
        			Кодирование
        			Тестирование
        			Эксплуатация
        		Затруднена или отсутствует обратная связь между этапами разработки.
        		В водопадной модели более ожидаемый и стабильный результат, потому что частая смена задач может влиять на качество продукта.
        	Agile - набор практик
        		Гибкость по agile подразумевается что мы меньше внимания уделяем формальным отношениям (отчетам) и больше внимания уделяем разработке программы. Больше общаемся с заказчиком, друг с другом (неформально), без длительных созвонов.

        		scrum методология
        			daily meeting/scrum (standup) 15-20 min на команду
        			story points - единица измерения относительной сложности выполнения задачи

        			scrum board

        			демо (демонстрация заказчику) иногда бывает, иногда нет (например, когда задачи были по бэку)
        			релиз
        			ретроспектива
        		Работа на сроки (подгонять команду).


        		kanban методология
        			разница:
        				в канбане нет спринтом
        				только один бэклог
        				есть milestones.
        				задачи оцениваются не всей командой а конкретным исполнителем. Исполнитель сам себе ставит срок.
        			Работа на качество.


        Severity (Серьезность):
        Отражает степень воздействия дефекта на систему.
        Категории могут включать: критическая, высокая, средняя и низкая.

        Priority (Приоритет):
        Отражает порядок, в котором дефект должен быть устранен.
        Категории могут включать: срочно, высоко, нормально, низко.




<ul>
    <li>Теория тестирования</li>
      <ul>
        <li>Что такое тестирование</li>
        <li>Источники ожидаемого поведения</li>
          <ul>
            <li>Product owner</li>
            <li>Конкуренты</li>
            <li>Common sense / Здравый смысл</li>
          </ul>
        <li>Цели тестирования</li>
            <ul>
            <li>Верификация</li>
            <li>Валидация</li>
            <li>Обнаружение дефектов</li>
          </ul>
        <li>Виды тестирования / Классификация</li>
          <ul>
            <li>по степени автоматизации</li>
              <ul>
                <li>Ручное тестирование — тест-кейсы выполняет человек.</li>
                <li>Автоматизированное тестирование — тест-кейсы частично или полностью выполняет специальное инструментальное средство.</li>
              </ul>
            <li>по запуску кода на исполнение</li>
              <ul>
                <li>Статическое тестирование - без запуска кода.</li>
                <li>Динамическое тестирование - с запуском кода.</li>
              </ul>
            <li>по доступу к коду и архитектуре приложения</li>
              <ul>
                <li>Метод белого ящика — доступ к коду есть.</li>
                <li>Метод чёрного ящика — доступа к коду нет.</li>
                <li>Метод серого ящика — к части кода доступ есть, к части — нет.</li>
              </ul>
            <li>по уровню детализации приложения (по уровню тестирования)</li>
              <ul>
                <li>Модульное (компонентное) тестирование — проверяются отдельные небольшие части приложения.</li>
                <li>Интеграционное тестирование — проверяется взаимодействие между несколькими частями приложения.</li>
                <li>Системное тестирование — приложение проверяется как единое целое.
              </ul>
            <li>по принципам работы с приложением</li>
              <ul>
                <li>Позитивное тестирование — все действия с приложением выполняются строго по инструкции без никаких недопустимых действий, некорректных данных и т.д. Можно образно сказать, что приложение исследуется в «тепличных условиях».</li>
                <li>Негативное тестирование — в работе с приложением выполняются (некорректные) операции и используются данные, потенциально приводящие к ошибкам (классика жанра — деление на ноль)</li>
              </ul>
            <li>по убыванию степени важности тестируемых функций</li>
              <ul>
                <li>Дымовое тестирование (обязательно изучите этимологию термина — хотя бы в Википедии110) — проверка самой важной, самой ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения.</li>
                <li>Тестирование критического пути — проверка функциональности, используемой типичными пользователями в типичной повседневной деятельности.</li>
                <li>Расширенное тестирование — проверка всей (остальной) функциональности, заявленной в требованиях.</li>
              </ul>
            <li>по объектам тестирования</li>
              <ul>
                <li>Функциональное</li>
                <li>Нефункциональное</li>
              </ul>
            <li>по целям и задачам</li>
              <ul>
                <li>Интерфейс (UI)</li>
                <li>Удобство использования (UX)</li>
                <li>Доступности (accessibility)</li>
                <li>Безопасности</li>
                <li>Производительности</li>
                <li>Локализации</li>
                <li>Интернационализации</li>
                <li>Совместимости</li>
                <li>Отказоустойчивости</li>
                <li>Инсталляционное</li>
                <li>Регрессионное</li>
                <li>Приемочное</li>
              </ul>            
          </ul>

        <li>Техники/методики тестирования</li>
          <ul>
            <li>Эквивалентное разбиение (Equivalence Partitioning). Разделение входных данных на эквивалентные классы, в пределах которых ожидается одинаковое поведение.</li>
            <li>Граничное значение (Boundary Value Analysis). Тестирование граничных значений входных данных, поскольку на границах часто возникают ошибки.</li>
            <li>Дерево решений (Decision Table Testing). Создание таблицы для отображения различных входных сценариев и ожидаемых результатов.</li>
            <li>Причинно-следственный граф (Cause-Effect Graphing). Использование графа для отображения функциональных входных и выходных данных.</li>
            <li>Опытно-ориентированные методики (Experience-based Techniques)</li>
              <ul>
                <li>Эксплоративное тестирование (Exploratory Testing). Неструктурированный подход к тестированию, основанный на опыте и интуиции тестировщика.</li>
                <li>Тестирование на основе ошибок (Error Guessing). Основывается на опыте тестировщика в идентификации типичных мест, где могут возникнуть ошибки.</li>
            <li>Доменное тестирование и комбинации параметров</li>
            <li>Попарное тестирование и поиск комбинаций</li>
              </ul>  
          </ul>

    <li>Тестовая документация</li>
      <ul>
        <li>Требования</li>
        <li>Чеклист</li>
            <ul>
              <li>Описание</li>
              <li>Примеры чеклистов</li>
            </ul>
        <li>Тест кейс (TestRail)</li>
        <li>Тест план и отчёт о результатах тестирования (TestRail)</li>
        <li>Баг репорт / Отчет о дефектет(Jira)</li>
        <li>Жизненный цикл бага</li>
        <li>Тестовое покрытие</li>
        <li>Тестовый сценарий, тестовая стратегия</li>
        <li>Тест-дизайн</li>
        <li>Техники тест-дизайна</li>
      </ul>
    <li>Виды приложений</li>
    <li>SDLC и STLC</li>  
      <ul>
        <li>Методологии разработки ПО (SDLC)</li>
          <ul>
            <li>CI/CD</li>
            <li>Водопадная модель</li>
            <li>V-образная модель</li>
            <li>Спиральная модель</li>
            <li>Модель хаоса</li>
            <li>Agile</li>
              <ul>
                <li>Scrum</li>
                  <ul>
                    <li>События</li>
                      <ul>
                        <li>Daily scrum (meeting/standup) 15-20 min на команду</li>
                        <li>Несколько спринтов образуют ...</li>
                        <li>Sprint</li>
                        <li>Демо</li>
                        <li>Релиз</li>
                        <li>Ретроспектива</li>
                      </ul>
                    <li>Роли</li>
                        <ul>
                          <li>Свиньи</li>
                            <ul>
                              <li>Product Owner</li>
                              <li>Scrum master</li>
                              <li>Dev team</li>
                              <li>Тестировщики</li>
                            </ul> 
                          <li>Куры</li>
                            <ul>
                              <li>Конечные пользователи</li>
                              <li>Руководители</li>
                              <li>Консультанты</li>
                            </ul>  
                        </ul>
                    <li>Артефакты</li>
                      <ul>
                        <li>Sprint backlog</li>
                        <li>Product backlog</li>
                        <li>Задачи для спринта</li>
                      </ul>
                  </ul>
                <li>Kanban</li>
              </ul>
            </ul>
          </ul>
    <li>SQL</li>
      <ul>
        <li>Что такое SQL</li>
        <li>Основные запросы SQL</li>
        <li>Использование SQL в тестировании</li>
      </ul>

    <li>Как работает интернет</li>
      <ul>
        <li>Что происходит когда вы вводите адрес (URL) в адресную строку браузера и нажимаете Enter</li>
        <li>HTTP, HTTPS</li>
        <li>Структура HTTP запроса и ответа</li>
        <li>Основные HTTP запросы</li>
        <li>Статус коды</li>
        <li>Cookie, cache</li>
        <li>SSL, TCP/IP</li>
      </ul>  

    <li>Операционные системы</li>
      <ul>
        <li>Unix и Unix-подобные</li>
        <li>Windows</li>
        <li>Мобильные</li>
        <li>RTOS</li>
        <li>Основные команды терминала Unix системы</li>
      </ul>

    <li>Git</li>
      <ul>
        <li>Что такое Git</li>
        <li>Основные команды Git</li>
        <li>Использование Git в тестировании</li>
      </ul>

    <li>Postman</li>
      <ul>
        <li>Создание запросов</li>
        <li>Создание коллекции запросов</li>
        <li>Переменные: глобальные, локальные</li>
        <li>Collection runner и Monitor</li>
      </ul> 

    <li>REST, SOAP</li>
      <ul>
        <li>REST</li>
        <li>Принципы REST</li>
        <li>SOAP</li>
        <li>Collection runner и Monitor</li>
        <li>JSON, XML</li>
      </ul> 

  </ul>
</div>

<ul>
    <li>Обязательно почитайте прекрасный цикл статей «The 7 Plagues of Soft-
ware Testing»15 (James Whittaker).</li>
    <li>
        <p>
            Настоятельно рекомендуется в дополнение к материалу этой главы прочесть:
            • прекрасную статью «Классификация видов тестирования»113;
            • также классическую книгу Ли Коупленда «Практическое руководство по разработке тестов» (Lee Copeland, «A Practitioner's Guide to Software Test Design»);
            • очень интересную заметку «Types of Software Testing: List of 100 Different Testing Types»
        </p>
    </li>
    <li>https://developer.mozilla.org/en-US/docs/Web/CSS/white-space</li>
    <li>http://larrr.com</li>
    <li>https://javarush.com/quests/lectures/questsyntaxpro.level03.lecture03</li>
    <li>https://news.learnenough.com/power-of-scripting-deploy-script</li>
    <li>https://toggl.com/blog/toggl-academy</li>
    <li>https://www.udemy.com/join/login-popup/?next=/course/qatesting/learn/lecture/35152438%3Fstart%3D0#overview</li>
    <li>https://testpro.io/ru/s-chego-nachat-obuchenie-nachinayushemu-testirovshiku/</li>
</ul>
<ul>
    <li>Unix command line</li>
    <li>Git</li>
    <li>Github</li>
    <li>Postman</li>
    <li>Swagger</li>
    <li>Selenium</li>
    <li>TestRail</li>
    <li>Jira</li>
    <li>DevTools</li>
    <li>AndroidStudio</li>
    <li>DB Browser for SQLite</li>
    <li>DBeaver</li>
    <li>Postgres</li>
</ul>


<!--
  <li></li>
    <ul>
      <li></li>
      <li></li>
      <li></li>
    </ul>
-->
    </pre>
</div>