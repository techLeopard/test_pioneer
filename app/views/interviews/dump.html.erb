<% provide(:title, "Dump")%>

<h1>Dump</h1>

<div>
    <pre style="white-space: pre-wrap;">
        Что такое тестирование?
        	Проверка программного продукта на соответствие ожидаемого поведения фактическому.


        Что такое ожидаемое поведение? Откуда ты его возьмешь?
        	Требования/спецификация
        	Конкуренты
        	Common sense (здравый смысл)



        Цели тестирования
        	Верификация
        		Определение: Это процесс подтверждения того, что продукт был разработан правильно и соответствует указанным требованиям на всех этапах разработки.
        		Цель: Убедиться, что продукт соответствует спецификациям и техническим требованиям.
        		Пример: Если требование гласит, что кнопка должна быть красного цвета, то верификация будет проверять, действительно ли кнопка красного цвета.
        	Валидация
        		Определение: Это процесс подтверждения того, что продукт соответствует предполагаемым потребностям и ожиданиям пользователей.
        		Цель: Убедиться, что продукт правильно решает проблемы, для которых он был разработан, и встречает ожидания пользователей.
        		Пример: Если продукт разрабатывается для онлайн-покупок, валидация может включать в себя проверку того, насколько удобно и эффективно пользователи могут осуществлять покупки через приложение.
        	Поиск ошибок
        		Определение: Это процесс идентификации и документирования дефектов в продукте.
        		Цель: Обнаружить и документировать все возможные ошибки в программном обеспечении перед его выпуском.
        		Пример: Если приложение неожиданно закрывается при нажатии определенной кнопки, процесс поиска ошибок будет включать в себя документирование этого дефекта и условий, при которых он произошел.



        Виды тестирования
        	По степени автоматизации
        		ручное
        		ручное с частичной автоматизацией
        			тестирование безопасности (раньше был антивирус)
        		автоматизированное тестирование
        			зависит от вида тестирования (есть виды тестирования где автотестирование неприменимо, например, ux)
        			виды, где без автоматизации никак нельзя:
        				тестирование производительности
        				unit-тестирование
        	По объектам тестирования
        		функциональное
        			smoke (дымовое) (тестирование критического пути/critical path, расширенное тестирование/extended)
        			sanity
        			security
        		нефункциональное
        			ui
        			ux
        			тестирование производительности
        				нагрузочное тестирование
        				стресс тестирование
        				тестирование масштабируемости
        				объемное тестирование
        			тестирование локализации
        				язык
        				формат даты
        				формат времени
        				единицы измерения (длина, температура)
        			тестирование интернационализации				
        			регрессионное
        			инсталляционное
        				установка, обновление, удаление приложения
        			тестирование помех
        			кросс-браузерное тестирование - браузер (версия браузера)
        			обратная совместимость
        			кросс-платформенное тестирование
        				операционные системы (версия ос)
        				железо



        	По уровням тестирования
        		системное
        			тестирование работы приложения в целом
        		модульное
        			разработчик написал модуль и сам его протестировал
        		интеграционное
        			проверка взаимодействия модулей между собой
        		приемочное (проводится в соотвествии с acceptance plan/план приемочных работ)
        			документ/требование (например, отсутствие критических багов)



        	По запуску кода на исполнение
        		Статическое (без запуска кода) например, тестирование документации. Или статический анализатор кода в IDE. Code review.
        		Динамическое


        	Техники тестирования по уровню доступа к коду и что мы покрываем тестами
        		Белый ящик (glass box)
        			когда мы видим код, разбираемся в нем и покрываем тестами сам код
        		Черный ящик (black box)
        			когда мы тестируем без доступа к коду, по на уровне пользователя, покрываем тестами бизнес-логику
        		Серый ящик (grey box)	
        			Запросы на сервер 




        Тестовая документация
        	Тест стратегия
        		Цель тестирования
        		Виды тестирования

        	Тест план
        		Критерии начала тестирования
        			Предоставление железа для тестирования
        			Документация
        			Функционал для тестирования (готов ли модуль)
        		Критерии окончания тестирования
        		Окружение
        		Ресурсы
        		Инструменты
        		Требования к тестовой лаборатории (эмуляторы или устройства)
        	Тест кейс
        		Ожидаемое поведение

        		Шаги для выполнения
        		Предусловия
        			Условия чтобы привести систему в определенное состояние и потом сценарий.
        		Постусловия
        			Указываем что нужно сделать чтобы систему вернуть в состояние до тестирование.
        	Чеклисты
        		это список проверок
        	Баг репорт
        		Ожидаемое и реальное поведение
        		Отчет о расхождении поведения
        		Приоритет
        		Окружение
        			Устройство, ОС и версия ОС
        		Версия билда приложения
        		Логи
        		Фото и видео




        	Критерии выбора между чеклистом и тест кейсом
        		Время
        			Мало - чеклисты
        			Много - тесткейсы
        		Коллеги
        			Мало - чеклисты
        			Много - тесткейсы
        		Сложность проверки
        			Системы, где чеклистом не отделаешься. Много шагов и в любом случае будешь писать.



        Жизненный цикл баг-репорта
        	Назначаем разработчику баг
        	Он чинит
        	Получаем исправленную версию
        	Ре-тестим
        	Сабмитим к релизу



        	Если ошибка воспроизводится у тестировщика, а у разработчика нет, то выяснить причину.
        	Возможные причины:
        		Разные версии билдов
        		Окружение похожее
        		Починил, но не сабмитнул в общее окружение

        	Если ошибка воспроизводиться, разработчик возвращает со статусом:
        		Дубликат (попросить ссылку на дубликат)
        		Won't Do - Модуль или функция запланирована к удалению в скором времени. Починка нецелесообразна.
        		Can't reproduce - выясняем окружение и тд.

        	Если разработчик отказывается выполнять работу, обратиться к ПМ-у.
        	А дальше баг могут переназначить или отложить из Спринт-бэклога в продукт-бэклог.


        Тест-дизайн. Зачем нам нужен тест-дизайн? Что он нам дает?
        	Нужен для обеспечения максимального покрытия тестами
        Техники тест-дизайна
        	Эквивалентное разбиение
        		Ввести минимальное количество символов определенного класса эквивалентности (буквы, цифры, спецсимволы, файлы определенного формата)
        	Анализ граничных значений (boundary value testing)
        		Тестирование граничных значений и выходящих за границы значений. 4-5 тестов. (Пример, от 5 до 100. Проверяем 5, 100, 4 и 101). Пятая проверка, например, 50, будет опциональной.
        		Проверка буквенных значений (например, таблица с фильтром от Г то З)
        	Диаграмма перехода состояний
        	Попарное тестирование




        Виды приложений
        	Вебприложения
        	Нативные (native)
        	Гибридные


        	Какие особенности работы и тестирования веб приложений
        		Ничего не нужно устанавливать
        		Тестирование происходит через браузер
        		Не может работать без интернета
        		Не требует разрешение на обновление
        	Как происходит взаимодействие между браузером и клиентом? Чем регулируется?
        		HTTP
        	Составные части HTTP запроса
        		Метод
        		Заголовок запроса (header)
        			Информация о браузере, о языке на котором обращается)
        		Тело запроса (body)
        	Составные части HTTP ответа
        		Статус-код ответа
        		Заголовки
        		Тело ответа

        	Какой статус-код придет если сервер сломался?
        		500-й
        	А если клиент?
        		400-й
        	А если все хорошо?
        		200-й?



        	Какие виды тестирования ты бы применил к веб приложениям?
        		Функциональное
        		UI
        		UX
        		Кросс-браузерное
        		Локализации (если есть разные локали)



        	Нативные приложения
        		Устанавливаются на устройство
        		Для технической части могут работать без интернета, но современные приложения часто работают с контентом который хранится на серверах
        		Требует разрешение на обновление

        		(Чисто нативно приложение - Калькулятор, фонарик, блокнот)

        		Виды тестов для наливного приложения:
        			Функциональное
        			UI
        			UX
        			Инсталляционное
        			Кросс-платформенное
        			Тестирование помех


        	Гибридные приложения
        		"Мозги" приложения находятся на веб-сервере.
        		Разрешение на обновление не требуется.
        		Обновление логики на сервере не требует адаптации под различные операционные системы.

        		например, Магазин Steam.


        	Как проверить приложение нативное или гибридное?
        	Выключаем интернет, заходим в приложение и смотрим.
        	Наивное приложение позволит пользоваться приложением, но с данными, которые были подгружены при последнем подключении к интернету. Бизнес-логика приложения не сломается.

        	Гибридное приложение работать не будет, так как бизнес-логика находится на сервере.
        	(Тонкий клиент) - точка входа - исполняемый файл.




        Методологии
        	Водопадная модель (waterfall) или каскадная модель
        		 Этапы
        			Проектирование
        			Кодирование
        			Тестирование
        			Эксплуатация
        		Затруднена или отсутствует обратная связь между этапами разработки.
        		В водопадной модели более ожидаемый и стабильный результат, потому что частая смена задач может влиять на качество продукта.
        	Agile - набор практик
        		Гибкость по agile подразумевается что мы меньше внимания уделяем формальным отношениям (отчетам) и больше внимания уделяем разработке программы. Больше общаемся с заказчиком, друг с другом (неформально), без длительных созвонов.

        		scrum методология
        			daily meeting/scrum (standup) 15-20 min на команду
        			story points - единица измерения относительной сложности выполнения задачи

        			scrum board

        			демо (демонстрация заказчику) иногда бывает, иногда нет (например, когда задачи были по бэку)
        			релиз
        			ретроспектива
        		Работа на сроки (подгонять команду).


        		kanban методология
        			разница:
        				в канбане нет спринтом
        				только один бэклог
        				есть milestones.
        				задачи оцениваются не всей командой а конкретным исполнителем. Исполнитель сам себе ставит срок.
        			Работа на качество.


        Severity (Серьезность):
        Отражает степень воздействия дефекта на систему.
        Категории могут включать: критическая, высокая, средняя и низкая.

        Priority (Приоритет):
        Отражает порядок, в котором дефект должен быть устранен.
        Категории могут включать: срочно, высоко, нормально, низко.




        SQL

        REST/SOAP (модный вопрос)
        Что такое?
        Какая между ними разница?



        Cache (Кэш):
        Назначение: Кэш веб-браузера предназначен для временного хранения веб-ресурсов на локальном компьютере пользователя. Это может включать в себя изображения, стили, скрипты и другие ресурсы.
        Преимущества: Кэширование ускоряет загрузку веб-страниц. Когда пользователь посещает веб-сайт, который он уже ранее посещал, браузер может загрузить ресурсы из локального кэша вместо того, чтобы загружать их с сервера заново.
        Ограничения: Кэшированные данные могут устареть, что может привести к отображению старой или некорректной версии веб-страницы.

        Cookie (Куки):
        Назначение: Куки — это небольшие файлы данных, которые веб-сайты могут устанавливать на вашем компьютере через ваш веб-браузер. Они обычно используются для хранения информации о сессии, такой как идентификаторы сессии, предпочтения пользователя или другие данные, которые веб-сайт может использовать для индивидуализации пользовательского опыта.
        Преимущества: Куки позволяют веб-сайтам "запоминать" пользователей между сессиями, предоставляя возможности для входа в систему, сохранения настроек и так далее.
        Ограничения: Поскольку куки могут содержать чувствительные данные (например, информацию для входа в систему), они могут стать целью для атакующих. Также многие люди стали беспокоиться о приватности из-за трекинговых куки, которые могут отслеживать поведение пользователей на разных веб-сайтах.





        Сделать таблицу различий типов приложений
        Прочитать 4 строки сути agile на их официальной странице
        	http://agilemanifesto.org/principles.html







        Как работает интернет?
        	Когда вы вводите адрес (URL) в адресную строку браузера и нажимаете Enter, запускается сложный процесс, включающий в себя ряд шагов от запроса до получения ответа. Вот основные этапы этого процесса:

        	1. Разбор URL
        	Браузер анализирует URL, чтобы определить, какую схему использовать (обычно HTTP или HTTPS), имя хоста (или 	веб-адрес) и путь к ресурсу.
        	2. Поиск DNS
        	Браузер запрашивает DNS (систему доменных имен), чтобы преобразовать доменное имя в IP-адрес сервера. Если 	IP-адрес уже сохранен в кэше браузера или операционной системы, этот шаг пропускается.
        	3. Установка Соединения
        	Браузер устанавливает TCP-соединение с сервером по полученному IP-адресу. Для HTTPS-соединений также 		происходит процесс рукопожатия SSL/TLS для обеспечения безопасного соединения.
        	4. Отправка HTTP Запроса
        	Браузер отправляет запрос на сервер. Запрос включает в себя метод (например, GET), путь к ресурсу, версию 	HTTP и, возможно, дополнительные заголовки.
        	5. Обработка Запроса Сервером
        	Сервер получает запрос, обрабатывает его и генерирует ответ. Это может включать обращение к базам данных, 	выполнение серверных скриптов и т.д.
        	6. Отправка Ответа
        	Сервер отправляет ответ обратно браузеру. Ответ может включать статусный код (например, 200 OK или 404 Not 	Found), данные (как правило, HTML-страницу) и заголовки ответа.
        	7. Отображение Контента
        	Браузер получает ответ, обрабатывает полученные данные и отображает их на экране. Это включает в себя разбор 	HTML, CSS и выполнение JavaScript.
        	8. Загрузка Внешних Ресурсов
        	Если в HTML-документе есть ссылки на внешние ресурсы (например, изображения, CSS, JavaScript), браузер также 	загружает их, делая дополнительные HTTP-запросы.
        	9. Завершение Процесса
        	После загрузки и обработки всех ресурсов страница полностью отображается, и процесс завершается.
        	Весь этот процесс происходит в считанные секунды, обеспечивая пользователю доступ к требуемым веб-ресурсам.	


        Структура HTTP запроса и ответа
    </pre>
</div>